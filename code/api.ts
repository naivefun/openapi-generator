// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Glodon PDC Catalog Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateDomainParams
 */
export interface CreateDomainParams {
    /**
     * 可读性强的名字
     * @type {string}
     * @memberof CreateDomainParams
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDomainParams
     */
    description?: string;
    /**
     * 字符串编码，唯一标识符
     * @type {string}
     * @memberof CreateDomainParams
     */
    code: string;
}
/**
 * 
 * @export
 * @interface CreateModelIndexParams
 */
export interface CreateModelIndexParams {
    /**
     * 
     * @type {string}
     * @memberof CreateModelIndexParams
     */
    name: string;
    /**
     * 支持复合索引
     * @type {Array<ModelPropertyIndex>}
     * @memberof CreateModelIndexParams
     */
    indexProperties: Array<ModelPropertyIndex>;
    /**
     * 
     * @type {boolean}
     * @memberof CreateModelIndexParams
     */
    unique: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateModelIndexParams
     */
    type: CreateModelIndexParamsTypeEnum;
    /**
     * ????
     * @type {string}
     * @memberof CreateModelIndexParams
     */
    engine: CreateModelIndexParamsEngineEnum;
}

/**
 * @export
 * enums
 */
        /**
        * @export
        * @enum {string}
        */
        export enum CreateModelIndexParamsTypeEnum {
                Term = 'Term',
                FullText = 'FullText'
        }
        /**
        * @export
        * @enum {string}
        */
        export enum CreateModelIndexParamsEngineEnum {
                Default = 'Default',
                FullText = 'FullText'
        }

/**
 * 
 * @export
 * @interface CreateModelOperationParams
 */
export interface CreateModelOperationParams {
    /**
     * 
     * @type {string}
     * @memberof CreateModelOperationParams
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateModelOperationParams
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateModelOperationParams
     */
    type: CreateModelOperationParamsTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CreateModelOperationParams
     */
    available?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateModelOperationParams
     */
    proxyType?: CreateModelOperationParamsProxyTypeEnum;
}

/**
 * @export
 * enums
 */
        /**
        * @export
        * @enum {string}
        */
        export enum CreateModelOperationParamsTypeEnum {
                REST = 'REST',
                PDC = 'PDC',
                Extension = 'Extension'
        }
        /**
        * @export
        * @enum {string}
        */
        export enum CreateModelOperationParamsProxyTypeEnum {
                CloudT = 'CloudT',
                GeneralSQL = 'GeneralSQL'
        }

/**
 * 
 * @export
 * @interface CreateModelParams
 */
export interface CreateModelParams {
    /**
     * 
     * @type {string}
     * @memberof CreateModelParams
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateModelParams
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof CreateModelParams
     */
    description?: string;
    /**
     * 
     * @type {ModelSchema}
     * @memberof CreateModelParams
     */
    schema: ModelSchema;
}
/**
 * 
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    id: string;
    /**
     * 可读性强的名字
     * @type {string}
     * @memberof Domain
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    description?: string;
    /**
     * 字符串编码，唯一标识符
     * @type {string}
     * @memberof Domain
     */
    code: string;
}
/**
 * 
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    description?: string;
    /**
     * 
     * @type {ModelSchema}
     * @memberof Model
     */
    schema: ModelSchema;
}
/**
 * 
 * @export
 * @interface ModelIndex
 */
export interface ModelIndex {
    /**
     * 
     * @type {string}
     * @memberof ModelIndex
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ModelIndex
     */
    name: string;
    /**
     * 支持复合索引
     * @type {Array<ModelPropertyIndex>}
     * @memberof ModelIndex
     */
    indexProperties: Array<ModelPropertyIndex>;
    /**
     * 
     * @type {boolean}
     * @memberof ModelIndex
     */
    unique: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelIndex
     */
    type: ModelIndexTypeEnum;
    /**
     * ????
     * @type {string}
     * @memberof ModelIndex
     */
    engine: ModelIndexEngineEnum;
}

/**
 * @export
 * enums
 */
        /**
        * @export
        * @enum {string}
        */
        export enum ModelIndexTypeEnum {
                Term = 'Term',
                FullText = 'FullText'
        }
        /**
        * @export
        * @enum {string}
        */
        export enum ModelIndexEngineEnum {
                Default = 'Default',
                FullText = 'FullText'
        }

/**
 * 
 * @export
 * @interface ModelMapping
 */
export interface ModelMapping {
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface ModelOperation
 */
export interface ModelOperation {
    /**
     * 
     * @type {string}
     * @memberof ModelOperation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ModelOperation
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ModelOperation
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelOperation
     */
    type: ModelOperationTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ModelOperation
     */
    available?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelOperation
     */
    proxyType?: ModelOperationProxyTypeEnum;
}

/**
 * @export
 * enums
 */
        /**
        * @export
        * @enum {string}
        */
        export enum ModelOperationTypeEnum {
                REST = 'REST',
                PDC = 'PDC',
                Extension = 'Extension'
        }
        /**
        * @export
        * @enum {string}
        */
        export enum ModelOperationProxyTypeEnum {
                CloudT = 'CloudT',
                GeneralSQL = 'GeneralSQL'
        }

/**
 * 
 * @export
 * @interface ModelPropertyIndex
 */
export interface ModelPropertyIndex {
    /**
     * 
     * @type {string}
     * @memberof ModelPropertyIndex
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelPropertyIndex
     */
    ascending?: boolean;
}
/**
 * 
 * @export
 * @interface ModelSchema
 */
export interface ModelSchema {
    /**
     * 
     * @type {string}
     * @memberof ModelSchema
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelSchema
     */
    type?: ModelSchemaTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ModelSchema
     */
    maxLength?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelSchema
     */
    defaultValue?: string;
}

/**
 * @export
 * enums
 */
        /**
        * @export
        * @enum {string}
        */
        export enum ModelSchemaTypeEnum {
                String = 'string',
                Integer = 'integer',
                Double = 'double'
        }

/**
 * 
 * @export
 * @interface ResourceProxy
 */
export interface ResourceProxy {
    /**
     * 
     * @type {string}
     * @memberof ResourceProxy
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceProxy
     */
    name?: string;
}

/**
 * DomainApi - axios parameter creator
 * @export
 */
export const DomainApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建 domain
         * @param {CreateDomainParams} [createDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(createDomainParams?: CreateDomainParams, options: any = {}): RequestArgs {
            const localVarPath = `/domains`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"CreateDomainParams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createDomainParams || {}) : (createDomainParams || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除 Domain 及其关联的 Model, ViewTemplate, Permission
         * @summary 删除 domain
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(domainId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling deleteDomain.');
            }
            const localVarPath = `/domains/{domainId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 domain 详情
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(domainId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling getDomain.');
            }
            const localVarPath = `/domains/{domainId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 domain 列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(options: any = {}): RequestArgs {
            const localVarPath = `/domains`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新 domain
         * @param {string} domainId 
         * @param {Domain} [domain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(domainId: string, domain?: Domain, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling updateDomain.');
            }
            const localVarPath = `/domains/{domainId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Domain" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(domain || {}) : (domain || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainApi - functional programming interface
 * @export
 */
export const DomainApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建 domain
         * @param {CreateDomainParams} [createDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(createDomainParams?: CreateDomainParams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain> {
            const localVarAxiosArgs = DomainApiAxiosParamCreator(configuration).createDomain(createDomainParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 删除 Domain 及其关联的 Model, ViewTemplate, Permission
         * @summary 删除 domain
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(domainId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DomainApiAxiosParamCreator(configuration).deleteDomain(domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取 domain 详情
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(domainId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain> {
            const localVarAxiosArgs = DomainApiAxiosParamCreator(configuration).getDomain(domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取 domain 列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Domain>> {
            const localVarAxiosArgs = DomainApiAxiosParamCreator(configuration).listDomains(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新 domain
         * @param {string} domainId 
         * @param {Domain} [domain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(domainId: string, domain?: Domain, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain> {
            const localVarAxiosArgs = DomainApiAxiosParamCreator(configuration).updateDomain(domainId, domain, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DomainApi - factory interface
 * @export
 */
export const DomainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建 domain
         * @param {CreateDomainParams} [createDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(createDomainParams?: CreateDomainParams, options?: any) {
            return DomainApiFp(configuration).createDomain(createDomainParams, options)(axios, basePath);
        },
        /**
         * 删除 Domain 及其关联的 Model, ViewTemplate, Permission
         * @summary 删除 domain
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(domainId: string, options?: any) {
            return DomainApiFp(configuration).deleteDomain(domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取 domain 详情
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(domainId: string, options?: any) {
            return DomainApiFp(configuration).getDomain(domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取 domain 列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(options?: any) {
            return DomainApiFp(configuration).listDomains(options)(axios, basePath);
        },
        /**
         * 
         * @summary 更新 domain
         * @param {string} domainId 
         * @param {Domain} [domain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(domainId: string, domain?: Domain, options?: any) {
            return DomainApiFp(configuration).updateDomain(domainId, domain, options)(axios, basePath);
        },
    };
};

/**
 * DomainApi - object-oriented interface
 * @export
 * @class DomainApi
 * @extends {BaseAPI}
 */
export class DomainApi extends BaseAPI {
    /**
     * 
     * @summary 创建 domain
     * @param {CreateDomainParams} [createDomainParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public createDomain(createDomainParams?: CreateDomainParams, options?: any) {
        return DomainApiFp(this.configuration).createDomain(createDomainParams, options)(this.axios, this.basePath);
    }

    /**
     * 删除 Domain 及其关联的 Model, ViewTemplate, Permission
     * @summary 删除 domain
     * @param {string} domainId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public deleteDomain(domainId: string, options?: any) {
        return DomainApiFp(this.configuration).deleteDomain(domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取 domain 详情
     * @param {string} domainId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public getDomain(domainId: string, options?: any) {
        return DomainApiFp(this.configuration).getDomain(domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取 domain 列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public listDomains(options?: any) {
        return DomainApiFp(this.configuration).listDomains(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 更新 domain
     * @param {string} domainId 
     * @param {Domain} [domain] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public updateDomain(domainId: string, domain?: Domain, options?: any) {
        return DomainApiFp(this.configuration).updateDomain(domainId, domain, options)(this.axios, this.basePath);
    }

}


/**
 * ModelApi - axios parameter creator
 * @export
 */
export const ModelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建 model
         * @param {string} domainId 
         * @param {CreateModelParams} [createModelParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel(domainId: string, createModelParams?: CreateModelParams, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling createModel.');
            }
            const localVarPath = `/domains/{domainId}/models`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"CreateModelParams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createModelParams || {}) : (createModelParams || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建模型 index
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {CreateModelIndexParams} [createModelIndexParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelIndex(domainId: string, modelId: string, createModelIndexParams?: CreateModelIndexParams, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling createModelIndex.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling createModelIndex.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}/indexes`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"CreateModelIndexParams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createModelIndexParams || {}) : (createModelIndexParams || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建模型 operation
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {CreateModelOperationParams} [createModelOperationParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelOperation(domainId: string, modelId: string, createModelOperationParams?: CreateModelOperationParams, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling createModelOperation.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling createModelOperation.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}/operations`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"CreateModelOperationParams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createModelOperationParams || {}) : (createModelOperationParams || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除 model
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(domainId: string, modelId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling deleteModel.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling deleteModel.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除模型 index
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} indexId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelIndex(domainId: string, modelId: string, indexId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling deleteModelIndex.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling deleteModelIndex.');
            }
            // verify required parameter 'indexId' is not null or undefined
            if (indexId === null || indexId === undefined) {
                throw new RequiredError('indexId','Required parameter indexId was null or undefined when calling deleteModelIndex.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}/indexes/{indexId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"indexId"}}`, encodeURIComponent(String(indexId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除模型 operation
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelOperation(domainId: string, modelId: string, operationId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling deleteModelOperation.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling deleteModelOperation.');
            }
            // verify required parameter 'operationId' is not null or undefined
            if (operationId === null || operationId === undefined) {
                throw new RequiredError('operationId','Required parameter operationId was null or undefined when calling deleteModelOperation.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}/operations/{operationId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"operationId"}}`, encodeURIComponent(String(operationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 model 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel(domainId: string, modelId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling getModel.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling getModel.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取模型 index 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} indexId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelIndex(domainId: string, modelId: string, indexId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling getModelIndex.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling getModelIndex.');
            }
            // verify required parameter 'indexId' is not null or undefined
            if (indexId === null || indexId === undefined) {
                throw new RequiredError('indexId','Required parameter indexId was null or undefined when calling getModelIndex.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}/indexes/{indexId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"indexId"}}`, encodeURIComponent(String(indexId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取模型 operation 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelOperation(domainId: string, modelId: string, operationId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling getModelOperation.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling getModelOperation.');
            }
            // verify required parameter 'operationId' is not null or undefined
            if (operationId === null || operationId === undefined) {
                throw new RequiredError('operationId','Required parameter operationId was null or undefined when calling getModelOperation.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}/operations/{operationId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"operationId"}}`, encodeURIComponent(String(operationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取模型 index 列表
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelIndexes(domainId: string, modelId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling listModelIndexes.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling listModelIndexes.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}/indexes`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取模型 operation 列表
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelOperations(domainId: string, modelId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling listModelOperations.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling listModelOperations.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}/operations`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 model 列表
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels(domainId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling listModels.');
            }
            const localVarPath = `/domains/{domainId}/models`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新 model 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModel(domainId: string, modelId: string, body?: any, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling updateModel.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling updateModel.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新模型 index
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} indexId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelIndex(domainId: string, modelId: string, indexId: string, body?: any, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling updateModelIndex.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling updateModelIndex.');
            }
            // verify required parameter 'indexId' is not null or undefined
            if (indexId === null || indexId === undefined) {
                throw new RequiredError('indexId','Required parameter indexId was null or undefined when calling updateModelIndex.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}/indexes/{indexId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"indexId"}}`, encodeURIComponent(String(indexId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新模型 operation
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelOperation(domainId: string, modelId: string, operationId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling updateModelOperation.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling updateModelOperation.');
            }
            // verify required parameter 'operationId' is not null or undefined
            if (operationId === null || operationId === undefined) {
                throw new RequiredError('operationId','Required parameter operationId was null or undefined when calling updateModelOperation.');
            }
            const localVarPath = `/domains/{domainId}/models/{modelId}/operations/{operationId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"operationId"}}`, encodeURIComponent(String(operationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelApi - functional programming interface
 * @export
 */
export const ModelApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建 model
         * @param {string} domainId 
         * @param {CreateModelParams} [createModelParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel(domainId: string, createModelParams?: CreateModelParams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).createModel(domainId, createModelParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建模型 index
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {CreateModelIndexParams} [createModelIndexParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelIndex(domainId: string, modelId: string, createModelIndexParams?: CreateModelIndexParams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelIndex> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).createModelIndex(domainId, modelId, createModelIndexParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建模型 operation
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {CreateModelOperationParams} [createModelOperationParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelOperation(domainId: string, modelId: string, createModelOperationParams?: CreateModelOperationParams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOperation> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).createModelOperation(domainId, modelId, createModelOperationParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除 model
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(domainId: string, modelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).deleteModel(domainId, modelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除模型 index
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} indexId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelIndex(domainId: string, modelId: string, indexId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).deleteModelIndex(domainId, modelId, indexId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除模型 operation
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelOperation(domainId: string, modelId: string, operationId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).deleteModelOperation(domainId, modelId, operationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取 model 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel(domainId: string, modelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).getModel(domainId, modelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取模型 index 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} indexId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelIndex(domainId: string, modelId: string, indexId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelIndex> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).getModelIndex(domainId, modelId, indexId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取模型 operation 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelOperation(domainId: string, modelId: string, operationId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOperation> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).getModelOperation(domainId, modelId, operationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取模型 index 列表
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelIndexes(domainId: string, modelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelIndex> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).listModelIndexes(domainId, modelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取模型 operation 列表
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelOperations(domainId: string, modelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOperation> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).listModelOperations(domainId, modelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取 model 列表
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels(domainId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).listModels(domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新 model 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModel(domainId: string, modelId: string, body?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).updateModel(domainId, modelId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新模型 index
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} indexId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelIndex(domainId: string, modelId: string, indexId: string, body?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelIndex> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).updateModelIndex(domainId, modelId, indexId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新模型 operation
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelOperation(domainId: string, modelId: string, operationId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOperation> {
            const localVarAxiosArgs = ModelApiAxiosParamCreator(configuration).updateModelOperation(domainId, modelId, operationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ModelApi - factory interface
 * @export
 */
export const ModelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建 model
         * @param {string} domainId 
         * @param {CreateModelParams} [createModelParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel(domainId: string, createModelParams?: CreateModelParams, options?: any) {
            return ModelApiFp(configuration).createModel(domainId, createModelParams, options)(axios, basePath);
        },
        /**
         * 
         * @summary 创建模型 index
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {CreateModelIndexParams} [createModelIndexParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelIndex(domainId: string, modelId: string, createModelIndexParams?: CreateModelIndexParams, options?: any) {
            return ModelApiFp(configuration).createModelIndex(domainId, modelId, createModelIndexParams, options)(axios, basePath);
        },
        /**
         * 
         * @summary 创建模型 operation
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {CreateModelOperationParams} [createModelOperationParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelOperation(domainId: string, modelId: string, createModelOperationParams?: CreateModelOperationParams, options?: any) {
            return ModelApiFp(configuration).createModelOperation(domainId, modelId, createModelOperationParams, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除 model
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(domainId: string, modelId: string, options?: any) {
            return ModelApiFp(configuration).deleteModel(domainId, modelId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除模型 index
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} indexId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelIndex(domainId: string, modelId: string, indexId: string, options?: any) {
            return ModelApiFp(configuration).deleteModelIndex(domainId, modelId, indexId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除模型 operation
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelOperation(domainId: string, modelId: string, operationId: string, options?: any) {
            return ModelApiFp(configuration).deleteModelOperation(domainId, modelId, operationId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取 model 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel(domainId: string, modelId: string, options?: any) {
            return ModelApiFp(configuration).getModel(domainId, modelId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取模型 index 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} indexId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelIndex(domainId: string, modelId: string, indexId: string, options?: any) {
            return ModelApiFp(configuration).getModelIndex(domainId, modelId, indexId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取模型 operation 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelOperation(domainId: string, modelId: string, operationId: string, options?: any) {
            return ModelApiFp(configuration).getModelOperation(domainId, modelId, operationId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取模型 index 列表
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelIndexes(domainId: string, modelId: string, options?: any) {
            return ModelApiFp(configuration).listModelIndexes(domainId, modelId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取模型 operation 列表
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelOperations(domainId: string, modelId: string, options?: any) {
            return ModelApiFp(configuration).listModelOperations(domainId, modelId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取 model 列表
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels(domainId: string, options?: any) {
            return ModelApiFp(configuration).listModels(domainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 更新 model 详情
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModel(domainId: string, modelId: string, body?: any, options?: any) {
            return ModelApiFp(configuration).updateModel(domainId, modelId, body, options)(axios, basePath);
        },
        /**
         * 
         * @summary 更新模型 index
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} indexId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelIndex(domainId: string, modelId: string, indexId: string, body?: any, options?: any) {
            return ModelApiFp(configuration).updateModelIndex(domainId, modelId, indexId, body, options)(axios, basePath);
        },
        /**
         * 
         * @summary 更新模型 operation
         * @param {string} domainId 
         * @param {string} modelId 
         * @param {string} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelOperation(domainId: string, modelId: string, operationId: string, options?: any) {
            return ModelApiFp(configuration).updateModelOperation(domainId, modelId, operationId, options)(axios, basePath);
        },
    };
};

/**
 * ModelApi - object-oriented interface
 * @export
 * @class ModelApi
 * @extends {BaseAPI}
 */
export class ModelApi extends BaseAPI {
    /**
     * 
     * @summary 创建 model
     * @param {string} domainId 
     * @param {CreateModelParams} [createModelParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public createModel(domainId: string, createModelParams?: CreateModelParams, options?: any) {
        return ModelApiFp(this.configuration).createModel(domainId, createModelParams, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 创建模型 index
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {CreateModelIndexParams} [createModelIndexParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public createModelIndex(domainId: string, modelId: string, createModelIndexParams?: CreateModelIndexParams, options?: any) {
        return ModelApiFp(this.configuration).createModelIndex(domainId, modelId, createModelIndexParams, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 创建模型 operation
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {CreateModelOperationParams} [createModelOperationParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public createModelOperation(domainId: string, modelId: string, createModelOperationParams?: CreateModelOperationParams, options?: any) {
        return ModelApiFp(this.configuration).createModelOperation(domainId, modelId, createModelOperationParams, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除 model
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public deleteModel(domainId: string, modelId: string, options?: any) {
        return ModelApiFp(this.configuration).deleteModel(domainId, modelId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除模型 index
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {string} indexId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public deleteModelIndex(domainId: string, modelId: string, indexId: string, options?: any) {
        return ModelApiFp(this.configuration).deleteModelIndex(domainId, modelId, indexId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除模型 operation
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {string} operationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public deleteModelOperation(domainId: string, modelId: string, operationId: string, options?: any) {
        return ModelApiFp(this.configuration).deleteModelOperation(domainId, modelId, operationId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取 model 详情
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public getModel(domainId: string, modelId: string, options?: any) {
        return ModelApiFp(this.configuration).getModel(domainId, modelId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取模型 index 详情
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {string} indexId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public getModelIndex(domainId: string, modelId: string, indexId: string, options?: any) {
        return ModelApiFp(this.configuration).getModelIndex(domainId, modelId, indexId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取模型 operation 详情
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {string} operationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public getModelOperation(domainId: string, modelId: string, operationId: string, options?: any) {
        return ModelApiFp(this.configuration).getModelOperation(domainId, modelId, operationId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取模型 index 列表
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public listModelIndexes(domainId: string, modelId: string, options?: any) {
        return ModelApiFp(this.configuration).listModelIndexes(domainId, modelId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取模型 operation 列表
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public listModelOperations(domainId: string, modelId: string, options?: any) {
        return ModelApiFp(this.configuration).listModelOperations(domainId, modelId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取 model 列表
     * @param {string} domainId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public listModels(domainId: string, options?: any) {
        return ModelApiFp(this.configuration).listModels(domainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 更新 model 详情
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public updateModel(domainId: string, modelId: string, body?: any, options?: any) {
        return ModelApiFp(this.configuration).updateModel(domainId, modelId, body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 更新模型 index
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {string} indexId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public updateModelIndex(domainId: string, modelId: string, indexId: string, body?: any, options?: any) {
        return ModelApiFp(this.configuration).updateModelIndex(domainId, modelId, indexId, body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 更新模型 operation
     * @param {string} domainId 
     * @param {string} modelId 
     * @param {string} operationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public updateModelOperation(domainId: string, modelId: string, operationId: string, options?: any) {
        return ModelApiFp(this.configuration).updateModelOperation(domainId, modelId, operationId, options)(this.axios, this.basePath);
    }

}


